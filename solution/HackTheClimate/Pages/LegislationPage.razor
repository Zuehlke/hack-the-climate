@page "/legislation/{id}"
@using HackTheClimate.Data
@using HackTheClimate.Services
@using System.Text.RegularExpressions
@using Sdcb.WordClouds
@using System.Drawing.Imaging
@using System.IO
@inject LegislationService LegislationService
@inject SimilarityService SimilarityService
@inject TopicService topicService

@if (_legislation == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <div id="legislation">

        <img src="@($"/flags/{_legislation.GeographyIso.ToUpperInvariant()}.svg")" alt="@_legislation.GeographyIso"/>
        &nbsp;@_legislation.Geography


        <hr/>

        <h1>@_legislation.Title</h1>

        <div class="meta">
            <div>
                <img src="@($"{_legislation.Type.ToString().ToLowerInvariant()}.svg")" alt="@_legislation.Type"/> @_legislation.Type
            </div>

            <div>
                @foreach (var d in _legislation.DocumentTypes)
                {
                    <span>@(d), </span>
                }
            </div>

            @foreach (var framework in _legislation.Frameworks)
            {
                <div>
                    @(framework) Framework
                </div>
            }
        </div>

        <p>
            @((MarkupString) _legislation.Description)
        </p>

        <h2>Timeline of Events</h2>
        <table>
            @foreach (var e in _legislation.Events)
            {
                <tr>
                    <td style="width: 200px">@e.Date.ToString("MMMM yyyy")</td>
                    <td>@e.Description</td>
                </tr>
            }
        </table>

        <h2>Documents</h2>
        <ul>
            @foreach (var d in _legislation.Documents)
            {
                <li>
                    <a href="@d.Uri.ToString()">@d.Description @(string.IsNullOrEmpty(d.Language) ? "" : "(" + d.Language + ")")</a>
                </li>
            }
            <li>
                <a href="@GetClimateLawUrl(_legislation)">Climate Laws Website</a>
            </li>
        </ul>

        <h2>Similar Legislations</h2>
        @if (_similarLegislations != null && _similarLegislations.Any() && _legislation.Geography.StartsWith("A"))
        {
            <ul>
                @foreach (var l in _similarLegislations)
                {
                    <li class="@GetSimilarityClass(l.Id)">
                        <a href="/legislation/@l.Id" title="@l.ShortenedDescription">@l.Title</a>
                        <br/>
                        <img src="@($"/flags/{l.GeographyIso.ToUpperInvariant()}.svg")" alt="@l.Geography"/> @l.Events.First().Date.Year
                        <a href="/compare/@_legislation.Id/@l.Id">
                            <span class="oi oi-eye" title="Compare"></span>
                        </a>
                    </li>
                }
            </ul>
        }
        else
        {
            <div class="alert alert-primary" role="alert">
                No similarities available for country <em>@_legislation.Geography</em>.<br/>
                Please use a country whose name starts with <em>A</em>.<br/>
                For the hackathon, only a small number of similarities were prepared.
            </div>
        }


        @if (_topic != null && _topic.Words.Any())
        {
            <h2>Topics <span class="badge badge-warning">AI</span></h2>
            <img src="@string.Format("data:image/png;base64,{0}", Convert.ToBase64String(GetWordCloud()))"/>
            <br/>
        }
    </div>
}

@code {

    [Parameter]
    public string Id { get; set; }

    private Legislation _legislation;
    private IEnumerable<Legislation> _similarLegislations;
    private IEnumerable<(string Id, double SimilarityScore)> _similarScores;
    private Topic? _topic;

    protected override async Task OnInitializedAsync()
    {
        _legislation = LegislationService.GetLegislation(Id);
        _similarScores = await SimilarityService.GetMostSimilarLegislationIds(_legislation);
        _similarLegislations = _similarScores.OrderByDescending(e => e.SimilarityScore).Select(e =>
        {
            var ids = e.Id.Split(",");
            var otherId = ids[0] == Id ? ids[1] : ids[0];
            return LegislationService.GetLegislation(otherId);
        });
        _topic = topicService.GetTopicsFor(_legislation);
    }

    /// <summary>
    ///     Creates URL like https://climate-laws.org/geographies/taiwan/laws/electricity-act
    ///     or https://climate-laws.org/geographies/afghanistan/policies/energy-sector-strategy-1387-1391-2007-8-2012-3
    ///     Tax Reform Act 2020 (Steuerreformgesetz 2020 – StRefG 2020 - 984/A)
    ///     becomes
    ///     tax-reform-act-2020-steuerreformgesetz-2020-strefg-2020-984-a
    /// </summary>
    /// <param name="legislation"></param>
    /// <returns></returns>
    private static string GetClimateLawUrl(Legislation legislation)
    {
        var titleIdRegex = new Regex("[^a-zA-Z0-9 -/]");
        var title = titleIdRegex.Replace(legislation.Title, string.Empty).Replace("/", "-").Replace(" ", "-").Replace("(", string.Empty).Replace(")", string.Empty).ToLowerInvariant();

        var type = legislation.Type == LegislationType.Legislative ? "laws" : "policies"; // no idea whether that's correct

        return $"https://climate-laws.org/geographies/{legislation.Geography.ToLower()}/{type}/{title}";
    }

    private string GetSimilarityClass(string lId)
    {
        var highestSimilarityScore = _similarScores.Max(s => s.SimilarityScore);
        var factor = 1 / highestSimilarityScore;
        var score = _similarScores.First(e => e.Id.Contains(lId)).SimilarityScore;
        switch (score * factor)
        {
            case < 0.1:
                return "similarity-10";

            case < 0.2:
                return "similarity-20";

            case < 0.3:
                return "similarity-30";

            case < 0.4:
                return "similarity-40";

            case < 0.5:
                return "similarity-50";

            case < 0.6:
                return "similarity-60";

            case < 0.7:
                return "similarity-70";

            case < 0.8:
                return "similarity-80";

            case < 0.9:
                return "similarity-90";

            default:
                return "similarity-100";
        }
    }

    private byte[] GetWordCloud()
    {
        var wc = new WordCloud(1000, 200);
        var freqs = _topic.Words.Select(x => (int) x.Score).ToList();
        var words = _topic.Words.Select(x => x.Word).ToList();

        var image = wc.Draw(words, freqs);
        using (var stream = new MemoryStream())
        {
            image.Save(stream, ImageFormat.Png);
            return stream.ToArray();
        }
    }

}
