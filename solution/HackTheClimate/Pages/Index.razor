@page "/"
@using HackTheClimate.Services
@using CurrieTechnologies.Razor.Clipboard
@using System.Text.Json
@inject IJSRuntime JS;
@inject GraphService graphService;
@inject ClipboardService clipboardService;

<h1>Search</h1>



@if (_searching)
{
    <div class="spinner-border" role="status">
        <span class="sr-only">Loading...</span>
    </div>
    <br />
}
else
{
    <div class="input-group">
        <input bind="@SearchTerm" type="text" class="form-control" placeholder="Search laws and policies" @onkeyup="OnInputKeyUp" @oninput="@((e) => { SearchTerm=(string)e.Value;})">
        <div class="input-group-append">
            <button class="btn btn-secondary" type="button" @onclick="Search">
                <i class="oi oi-magnifying-glass"></i>
            </button>
        </div>
    </div>
}

<svg @ref="_renderTo" height="350" width="1000"></svg>

@if (_searchResult != null && _searchResult.RankedLegislations.Any())
{
    <ul class="laws-and-policies">
        @foreach (var legislation in _searchResult.RankedLegislations.OrderBy(r => r.ConfidenceScore))
        {
            <li>
                <h2 class="title">
                    <a href="/legislation/@legislation.Legislation.Id">@legislation.Legislation.Title</a>
                </h2>
                <div class="meta">
                    <div>
                        <img src="@($"/flags/{legislation.Legislation.GeographyIso.ToUpperInvariant()}.svg")" /> @legislation.Legislation.Geography
                    </div>

                    <div>
                        <img src="@($"{legislation.Legislation.Type.ToString().ToLowerInvariant()}.svg")" />@legislation.Legislation.Type
                    </div>

                    <div className="right">
                        @legislation.Legislation.Events.First().Date.Year
                    </div>

                    <div className="right">
                        @(legislation.Legislation.Events.Count() > 1 ? $"Last change in {legislation.Legislation.Events.Last().Date.Year}" : "")
                    </div>
                </div>
                <div class="description">@legislation.Legislation.ShortenedDescription</div>
            </li>
        }
    </ul>

    <button type="button" class="btn btn-outline-secondary" @onclick="CopySearchResultToClipboard">Copy Search Result Data to Clipboard</button>
}

@if (_searchResult != null && !_searchResult.RankedLegislations.Any())
{
    <p>
        No data found
    </p>
}



@code {
    protected ElementReference _renderTo;
    protected string SearchTerm { get; set; }

    protected bool _searching = false;
    protected SearchResult _searchResult;

    private async Task OnInputKeyUp(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" || e.Code == "13")
        {
            await Search();
        }
    }

    private async Task Search()
    {
        _searching = true;

        _searchResult = await graphService.SearchAsync(SearchTerm);

        if (_searchResult.RankedLegislations.Any())
        {

            var diagramModule = await JS
                .InvokeAsync<IJSObjectReference>("import", "/diagram.js");

            await diagramModule.InvokeVoidAsync("renderDiagram", _renderTo, _searchResult.Graph);
        }

        _searching = false;
    }

    private async Task CopySearchResultToClipboard()
    {
        if (clipboardService != null)
        {
            await clipboardService.WriteTextAsync(JsonSerializer.Serialize(_searchResult.RankedLegislations, new JsonSerializerOptions
            {
                WriteIndented = true,
            }));
        }
    }
}