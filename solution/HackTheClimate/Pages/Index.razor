@page "/"
@using HackTheClimate.Services
@using CurrieTechnologies.Razor.Clipboard
@using System.Timers
@using System.Text.Json
@using System.Diagnostics
@using System.Diagnostics.Eventing.Reader
@using HackTheClimate.Data
@inject IJSRuntime JS;
@inject GraphService graphService;
@inject ClipboardService clipboardService;
@inject DialogService dialogService;
@inject DocumentService documentService;

<div class="row justify-content-between">
    <h1 class="col-3">Search</h1>
</div>

@if (_searching)
{
<div class="spinner-border" role="status">
    <span class="sr-only">Loading...</span>
</div>
<br />
<br />
<div class="alert alert-primary" role="alert">
    <ul>
        @foreach (var info in _searchUpdates)
            {
        <li>@info</li>
            }
    </ul>
</div>
}
else
{
<div class="input-group">
    <input @bind="SearchTerm" type="text" class="form-control" placeholder="Search laws and policies" @onkeyup="OnInputKeyUp" @oninput="OnInput">
    <div class="input-group-append">
        <button class="btn btn-secondary" type="button" @onclick="Search">
            <i class="oi oi-magnifying-glass"></i>
        </button>
        <button type="button" @onclick="(()=>switchModal=!switchModal)" class="btn btn-light" data-bs-dismiss="modal">Similarity Weights</button>
    </div>
</div>
}

<div style="display: flex;">
    <div style="flex: 0 0 900px">
        <svg @ref="_renderTo" height="900" width="900"></svg>
    </div>
    <div style="flex: 1; overflow-y: scroll; height: 900px">
        @if (!_searching && _searchResult != null && _searchResult.RankedLegislations.Any())
        {
        <ul class="search-results">
            @foreach (var legislation in _sortedLegislations) {
                
            <li class="@GetSimilarityClass(@legislation.Id)">
                <a href="/legislation/@legislation.Id" title="@legislation.Title">@legislation.Title</a>
                <img src="@($"/flags/{legislation.GeographyIso.ToUpperInvariant()}.svg")" alt="@legislation.Geography" /> @legislation.Events.First().Date.Year <span class="oi oi-align-left" title="@legislation.ShortenedDescription"></span>
            </li>
                }
        </ul>

        <!--
        <button type="button" class="btn btn-outline-secondary" @onclick="CopySearchResultToClipboard">Copy Search Result Data to Clipboard</button>
        -->
        }

        @if (!_searching && _searchResult != null && !_searchResult.RankedLegislations.Any())
        {
        <p>
            No data found
        </p>
        }
    </div>
</div>


@if (switchModal)
{
    <div class="modal fade show" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" style="display: block;" aria-hidden="true">
        <div class="modal-dialog" style="max-width: 580px">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLabel">Similarity Weights</h5>
                    <button type="button" @onclick="(() => switchModal = !switchModal)" class="btn-close" aria-label="Close">
                    </button>
                </div>
                <div class="modal-body">
                    <div>
                        <div class="row">
                            <span class="col-4">Similarity Threshold</span>
                            <div class="col-6">
                                <RadzenSlider @bind-Value=SimilarityThreshold TValue="int" Min="0" Max="100"/>
                            </div>
                            <input class="form-control col-1" type="text" @bind="SimilarityThreshold" disabled>
                        </div>

                        <h6>Metadata <span class="badge badge-warning">Metadata</span></h6>

                        <div class="row">
                            <span class="col-4">Keyword</span>
                            <div class="col-6">
                                <RadzenSlider @bind-Value=_similarityWeights.KeywordWeight TValue="int" Min="0" Max="10"/>
                            </div>
                            <input class="form-control col-1" type="text" @bind="_similarityWeights.KeywordWeight" disabled>
                        </div>
                        <div class="row">
                            <span class="col-4">Sector</span>
                            <div class="col-6">
                                <RadzenSlider @bind-Value=_similarityWeights.SectorWeight TValue="int" Min="0" Max="10"/>
                            </div>
                            <input class="form-control col-1" type="text" @bind="_similarityWeights.SectorWeight" disabled>
                        </div>
                        <div class="row">
                            <span class="col-4">Framework</span>
                            <div class="col-6">
                                <RadzenSlider @bind-Value=_similarityWeights.FrameworkWeight TValue="int" Min="0" Max="10"/>
                            </div>
                            <input class="form-control col-1" type="text" @bind="_similarityWeights.FrameworkWeight" disabled>
                        </div>
                        <div class="row">
                            <span class="col-4">Instrument</span>
                            <div class="col-6">
                                <RadzenSlider @bind-Value=_similarityWeights.InstrumentWeight TValue="int" Min="0" Max="10"/>
                            </div>
                            <input class="form-control col-1" type="text" @bind="_similarityWeights.InstrumentWeight" disabled>
                        </div>
                        <div class="row">
                            <span class="col-4">Natural Hazard</span>
                            <div class="col-6">
                                <RadzenSlider @bind-Value=_similarityWeights.NaturalHazardWeight TValue="int" Min="0" Max="10"/>
                            </div>
                            <input class="form-control col-1" type="text" @bind="_similarityWeights.NaturalHazardWeight" disabled>
                        </div>
                        <div class="row">
                            <span class="col-4">Response</span>
                            <div class="col-6">
                                <RadzenSlider @bind-Value=_similarityWeights.ResponseWeight TValue="int" Min="0" Max="10"/>
                            </div>
                            <input class="form-control col-1" type="text" @bind="_similarityWeights.ResponseWeight" disabled>
                        </div>
                        <div class="row">
                            <span class="col-4">Location</span>
                            <div class="col-6">
                                <RadzenSlider @bind-Value=_similarityWeights.LocationWeight TValue="int" Min="0" Max="10"/>
                            </div>
                            <input class="form-control col-1" type="text" @bind="_similarityWeights.LocationWeight" disabled>
                        </div>
                        <div class="row">
                            <span class="col-4">Document Type</span>
                            <div class="col-6">
                                <RadzenSlider @bind-Value=_similarityWeights.DocumentTypeWeight TValue="int" Min="0" Max="10"/>
                            </div>
                            <input class="form-control col-1" type="text" @bind="_similarityWeights.DocumentTypeWeight" disabled>
                        </div>
                        <div class="row">
                            <span class="col-4">Type</span>
                            <div class="col-6">
                                <RadzenSlider @bind-Value=_similarityWeights.TypeWeight TValue="int" Min="0" Max="10"/>
                            </div>
                            <input class="form-control col-1" type="text" @bind="_similarityWeights.TypeWeight" disabled>
                        </div>

                        <h6>Entitiy Recognition <span class="badge badge-warning">AI</span></h6>
                        <div class="row">
                            <span class="col-4">Category Product</span>
                            <div class="col-6">
                                <RadzenSlider @bind-Value=_similarityWeights.EntityProductWeight TValue="int" Min="0" Max="10"/>
                            </div>
                            <input class="form-control col-1" type="text" @bind="_similarityWeights.EntityProductWeight" disabled>
                        </div>
                        <div class="row">
                            <span class="col-4">Category Event</span>
                            <div class="col-6">
                                <RadzenSlider @bind-Value=_similarityWeights.EntityEventWeight TValue="int" Min="0" Max="10"/>
                            </div>
                            <input class="form-control col-1" type="text" @bind="_similarityWeights.EntityEventWeight" disabled>
                        </div>
                        <div class="row">
                            <span class="col-4">Category Skill</span>
                            <div class="col-6">
                                <RadzenSlider @bind-Value=_similarityWeights.EntitySkillWeight TValue="int" Min="0" Max="10"/>
                            </div>
                            <input class="form-control col-1" type="text" @bind="_similarityWeights.EntitySkillWeight" disabled>
                        </div>
                        <div class="row">
                            <span class="col-4">Category Location</span>
                            <div class="col-6">
                                <RadzenSlider @bind-Value=_similarityWeights.EntityLocationWeight TValue="int" Min="0" Max="10"/>
                            </div>
                            <input class="form-control col-1" type="text" @bind="_similarityWeights.EntityLocationWeight" disabled>
                        </div>
                    </div>
                        <h6>Semantic Topics<span class="badge badge-warning">AI</span></h6>
                    <div class="row">
                        <span class="col-4">Topic</span>
                        <div class="col-6">
                            <RadzenSlider @bind-Value=_similarityWeights.TopicWeight TValue="int" Min="0" Max="10" />
                        </div>
                        <input class="form-control col-1" type="text" @bind="_similarityWeights.TopicWeight" disabled>
                    </div>
                    
                </div>
                <div class="modal-footer">
                    <button type="button" @onclick="(()=>switchModal=!switchModal)" class="btn btn-primary" data-bs-dismiss="modal">Apply</button>
                </div>
            </div>
        </div>
    </div>
}

@code {

    protected ElementReference _renderTo;
    protected string SearchTerm { get; set; }
    protected List<string> _searchUpdates;
    protected int _searchUpdatesIndex;

    protected bool _searching;
    protected SearchResult _searchResult;
    private static Action<string> _onNodeSelectedAction;
    private Dictionary<string, string> _similarityClass = new Dictionary<string, string>();
    protected SimilarityWeights _similarityWeights = SimilarityWeights.DefaultWeights();
    protected int SimilarityThreshold = 22; // default value
    protected List<Legislation> _sortedLegislations;
    public bool switchModal { get; set; } = false;

    private static readonly List<string> GenericSearchUpdates = new List<string> {"Performing a full text search in 2128 documents", "Performing a full text search in all metadata (keywords, summary, ...)", "Calculating similarity of legislations based on AI text-analysis", "Calculating similarity of legislations based on metadata",  "... wait for it", "... almost there", "... just one last thing", "... to be honest, we have not yet started optimizing the performance, but there is potential"};

    private static Func<string, Task<DocumentDetails>> _getDetailsAsyncAction;

    protected override void OnInitialized()
    {
        _onNodeSelectedAction = OnNodeSelectedCallback;
        _getDetailsAsyncAction = GetDetailsPrivate;
    }

    private void OnNodeSelectedCallback(string id)
    {
        _similarityClass = new Dictionary<string, string>();

        foreach (var link in _searchResult.Graph.Links)
        {
            if (link.Source == id || link.Target == id)
            {
                var key = link.Source == id ? link.Target : link.Source;
                string value = "";
                switch (link.SimilarityScore)
                {
                    case < 0.1:
                        value = "similarity-10";
                        break;

                    case < 0.2:
                        value = "similarity-20";
                        break;

                    case < 0.3:
                        value = "similarity-30";
                        break;

                    case < 0.4:
                        value = "similarity-40";
                        break;

                    case < 0.5:
                        value = "similarity-50";
                        break;

                    case < 0.6:
                        value = "similarity-60";
                        break;

                    case < 0.7:
                        value = "similarity-70";
                        break;

                    case < 0.8:
                        value = "similarity-80";
                        break;


                    case < 0.9:
                        value = "similarity-90";
                        break;

                    default:
                        value = "similarity-100";
                        break;
                }

                _similarityClass.Add(key, value);
            }
        }

        // does not work.... :-(
        _sortedLegislations = _searchResult.RankedLegislations.Select(r => r.Legislation).OrderBy(l => _searchResult.Graph.Links.First(link => link.Source == l.Id || link.Target == l.Id).SimilarityScore).ToList();

        StateHasChanged();
    }

    private async Task OnInputKeyUp(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" || e.Code == "13")
        {
            await Search();
        }
    }

    private void OnInput(ChangeEventArgs e)
    {
        SearchTerm = (string) e.Value;
    }

    private async Task Search()
    {
        var searchTerm = SearchTerm;
        _searching = true;
        _searchUpdates = new List<string> {"Searching for '" + SearchTerm + "'"};
        _searchUpdatesIndex = 0;
        _searchResult = null;
        _similarityClass = new Dictionary<string, string>();
        _sortedLegislations = new List<Legislation>();

        var timer = new Timer(3000);
        timer.Elapsed += (sender, args) =>
        {
            if (_searchUpdatesIndex < GenericSearchUpdates.Count)
            {
                _searchUpdates.Add(GenericSearchUpdates[_searchUpdatesIndex]);
            }
            _searchUpdatesIndex++;
            InvokeAsync(StateHasChanged);
        };
        timer.AutoReset = true;
        timer.Enabled = true;

        var diagramModule = await JS
            .InvokeAsync<IJSObjectReference>("import", "/diagram.js");

        await diagramModule.InvokeVoidAsync("clearDiagram", _renderTo);

        _searchResult = await graphService.SearchAsync(SearchTerm, _similarityWeights, SimilarityThreshold);
        timer.Stop();
        timer.Dispose();

        if (_searchResult.RankedLegislations.Any())
        {
            await diagramModule.InvokeVoidAsync("renderDiagram", _renderTo, _searchResult.Graph);
            _sortedLegislations = _searchResult.RankedLegislations.OrderBy(l => l.ConfidenceScore).Select(r => r.Legislation).ToList();
        }

        SearchTerm = searchTerm;
        _searching = false;
    }

    private async Task CopySearchResultToClipboard()
    {
        if (clipboardService != null)
        {
            await clipboardService.WriteTextAsync(JsonSerializer.Serialize(_searchResult.RankedLegislations, new JsonSerializerOptions
            {
                WriteIndented = true
            }));
        }
    }

    [JSInvokableAttribute("GetDetails")]
    public static async Task<DocumentDetails> GetDetails(string documentId)
    {
        return await _getDetailsAsyncAction(documentId);
    }

    private async Task<DocumentDetails> GetDetailsPrivate(string documentId)
    {
        return await documentService.GetDetailsAsync(documentId);
    }


    [JSInvokable]
    public static void OnNodeSelected(string id)
    {
        _onNodeSelectedAction.Invoke(id);
    }

    private string GetSimilarityClass(string legislationId)
    {
        if (_similarityClass.Any())
        {
            if (_similarityClass.TryGetValue(legislationId, out var clazz))
            {
                return clazz;
            } else
            {
                return "similarity-10";
            }
        }
        else
        {
            return string.Empty;
        }

    }
}
