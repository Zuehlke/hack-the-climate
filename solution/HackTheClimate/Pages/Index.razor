@page "/"
@using HackTheClimate.Services
@using CurrieTechnologies.Razor.Clipboard
@using System.Timers
@using System.Text.Json
@inject IJSRuntime JS;
@inject GraphService graphService;
@inject ClipboardService clipboardService;

<h1>Search</h1>


@if (_searching)
{
<div class="spinner-border" role="status">
    <span class="sr-only">Loading...</span>
</div>
<br />
<br />
<div class="alert alert-primary" role="alert">
    <ul>
        @foreach (var info in _searchUpdates)
            {
        <li>@info</li>
            }
    </ul>
</div>
}
else
{
<div class="input-group">
    <input @bind="SearchTerm" type="text" class="form-control" placeholder="Search laws and policies" @onkeyup="OnInputKeyUp" @oninput="OnInput">
    <div class="input-group-append">
        <button class="btn btn-secondary" type="button" @onclick="Search">
            <i class="oi oi-magnifying-glass"></i>
        </button>
    </div>
</div>
}

<div style="display: flex;">
    <div style="flex: 0 0 900px">
        <svg @ref="_renderTo" height="800" width="800"></svg>
    </div>
    <div style="flex: 1;">
        @if (!_searching && _searchResult != null && _searchResult.RankedLegislations.Any())
        {
        <ul class="search-results">
            @foreach (var legislation in _searchResult.RankedLegislations.OrderBy(r => r.ConfidenceScore))
                {
            <li>
                <a href="/legislation/@legislation.Legislation.Id" title="@legislation.Legislation.Title">@legislation.Legislation.Title</a>
                <img src="@($"/flags/{legislation.Legislation.GeographyIso.ToUpperInvariant()}.svg")" alt="@legislation.Legislation.Geography" /> @legislation.Legislation.Events.First().Date.Year <span class="oi oi-align-left" title="@legislation.Legislation.ShortenedDescription"></span>
            </li>
                }
        </ul>

        <!--
        <button type="button" class="btn btn-outline-secondary" @onclick="CopySearchResultToClipboard">Copy Search Result Data to Clipboard</button>
        -->
        }

        @if (!_searching && _searchResult != null && !_searchResult.RankedLegislations.Any())
        {
        <p>
            No data found
        </p>
        }
    </div>
</div>


@code {
    protected ElementReference _renderTo;
    protected string SearchTerm { get; set; }
    protected List<string> _searchUpdates;
    protected int _searchUpdatesIndex;

    protected bool _searching;
    protected SearchResult _searchResult;

    private static readonly List<string> GenericSearchUpdates = new List<string> {"Performing a full text search in 2128 documents", "Calculating similarity of legislations based on metadata", "Calculating similarity of legislations based on text-analysis", "... wait for it", "... almost there", "... just one last thing"};

    private async Task OnInputKeyUp(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" || e.Code == "13")
        {
            await Search();
        }
    }

    private void OnInput(ChangeEventArgs e)
    {
        SearchTerm = (string) e.Value;
    }

    private async Task Search()
    {
        var searchTerm = SearchTerm;
        _searching = true;
        _searchUpdates = new List<string> {"Searching for '" + SearchTerm + "'"};
        _searchUpdatesIndex = 0;
        _searchResult = null;

        var timer = new Timer(3000);
        timer.Elapsed += (sender, args) =>
        {
            if (_searchUpdatesIndex < GenericSearchUpdates.Count)
            {
                _searchUpdates.Add(GenericSearchUpdates[_searchUpdatesIndex]);
            }
            _searchUpdatesIndex++;
            InvokeAsync(StateHasChanged);
        };
        timer.AutoReset = true;
        timer.Enabled = true;

        var diagramModule = await JS
            .InvokeAsync<IJSObjectReference>("import", "/diagram.js");

        await diagramModule.InvokeVoidAsync("clearDiagram", _renderTo);


        _searchResult = await graphService.SearchAsync(SearchTerm);
        timer.Stop();
        timer.Dispose();


        if (_searchResult.RankedLegislations.Any())
        {
            await diagramModule.InvokeVoidAsync("renderDiagram", _renderTo, _searchResult.Graph);
        }

        SearchTerm = searchTerm;
        _searching = false;
    }

    private async Task CopySearchResultToClipboard()
    {
        if (clipboardService != null)
        {
            await clipboardService.WriteTextAsync(JsonSerializer.Serialize(_searchResult.RankedLegislations, new JsonSerializerOptions
            {
                WriteIndented = true
            }));
        }
    }

}